name: PR

on:
  issue_comment:
    types: [ 'created' ]
  pull_request:
    types: ["opened", "reopened", "synchronize", "ready_for_review"]
    branches: ["**", "main"]
    paths:
      - "**" # all files otherwise excludes wont work
      - "!**/**/*.md" # ignore markdown files
      - "!demo/**" # ignore demos folder
      - "!sample/**" # ignore samples folder
      - "!example/**" # ignore examples folder

jobs:
  trigger-checks:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    outputs:
      conformance-comment: ${{ steps.conformance_comment_trigger.outputs.triggered == 'true' }}
      v1: ${{ (steps.conformance_comment_trigger.outputs.arguments[0]) }}
      v2: ${{ toJson(steps.conformance_comment_trigger.outputs.arguments[0]) }}
      v3: ${{ (steps.conformance_comment_trigger.outputs.arguments)[0] }}
      v4: ${{ toJson((steps.conformance_comment_trigger.outputs.arguments)[0]) }}
      v5: ${{ steps.conformance_comment_trigger.outputs.arguments }}
      v6: ${{ toJson(steps.conformance_comment_trigger.outputs.arguments) }}
    steps:
      - uses: shanegenschaw/pull-request-comment-trigger@v2.1.0
        id: conformance_comment_trigger
        if: ${{ github.event.issue.pull_request }}
        with:
          trigger: '/test-conformance **'
          reaction: eyes
          allow_arguments: true
        env:
          GITHUB_TOKEN: '${{ secrets.PAT_CI_GHAX }}'
      - name: s2
        id: s2
        run: echo ${{ steps.conformance_comment_trigger.outputs.triggered }} ${{ steps.conformance_comment_trigger.outputs.arguments }} ${{ steps.conformance_comment_trigger.outputs.comment_body }}

  integration-by-comment:
    runs-on: ubuntu-latest
    needs: [trigger-checks]
    outputs:
      output_1: ${{ needs.trigger-checks.outputs.output_1 }}
    if: ${{ needs.trigger-checks.outputs.conformance-comment == 'true' }}
    steps:
      - name: xxx
        id: yyy
        env:
          OUTPUT1: ${{ needs.trigger-checks.outputs.v1 }}
          OUTPUT2: ${{ needs.trigger-checks.outputs.v2 }}
          OUTPUT3: ${{ needs.trigger-checks.outputs.v3 }}
          OUTPUT4: ${{ needs.trigger-checks.outputs.v4 }}
          OUTPUT5: ${{ needs.trigger-checks.outputs.v5 }}
          OUTPUT6: ${{ needs.trigger-checks.outputs.v6 }}
        run: echo "==>$OUTPUT1 ==>$OUTPUT2 ==>$OUTPUT3 ==>$OUTPUT4 ==>$OUTPUT5 ==>$OUTPUT6"
