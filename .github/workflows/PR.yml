name: PR

on:
  issue_comment:
    types: [ 'created' ]
  pull_request:
    types: ["opened", "reopened", "synchronize", "ready_for_review"]
    branches: ["**", "main"]
    paths:
      - "**" # all files otherwise excludes wont work
      - "!**/**/*.md" # ignore markdown files
      - "!demo/**" # ignore demos folder
      - "!sample/**" # ignore samples folder
      - "!example/**" # ignore examples folder

jobs:
  trigger-checks:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    outputs:
      conformance-comment: ${{ steps.conformance_comment_trigger_argcount_0.outputs.triggered == 'true' || steps.conformance_comment_trigger_argcount_1.outputs.triggered == 'true' || steps.conformance_comment_trigger_argcount_2.outputs.triggered == 'true' || steps.conformance_comment_trigger_argcount_3.outputs.triggered == 'true' }}
      v5: ${{ steps.conformance_comment_trigger.outputs.arguments }}
      conformance_matrix_args: ${{ steps.set_conformance_matrix.outputs.conf_matrix }}
    steps:
      - id: conformance_comment_trigger_ensure_file_present
        run: |
          echo 'truncate ARGS'
          touch $HOME/ARGS
          > $HOME/ARGS
      - uses: shanegenschaw/pull-request-comment-trigger@v2.1.0
        id: conformance_comment_trigger_argcount_1
        if: ${{ github.event.issue.pull_request }}
        with:
          trigger: '/test-conformance **'
          reaction: eyes
          allow_arguments: true
        env:
          GITHUB_TOKEN: '${{ secrets.PAT_CI_GHAX }}'
      - id: conformance_comment_trigger_argcount_1_output
        if: ${{ steps.conformance_comment_trigger_argcount_1.outputs.triggered == 'true' }}
        run: |
          echo 1 ${{ steps.conformance_comment_trigger_argcount_1.outputs.arguments }}
          echo ${{ steps.conformance_comment_trigger_argcount_1.outputs.arguments }} > $HOME/ARGS
          cat $HOME/ARGS
          echo "$(cat $HOME/ARGS)"
          echo "$(cat $HOME/ARG)"
      - uses: shanegenschaw/pull-request-comment-trigger@v2.1.0
        id: conformance_comment_trigger_argcount_2
        if: ${{ github.event.issue.pull_request }}
        with:
          trigger: '/test-conformance ** **'
          reaction: eyes
          allow_arguments: true
        env:
          GITHUB_TOKEN: '${{ secrets.PAT_CI_GHAX }}'
      - id: conformance_comment_trigger_argcount_2_output
        if: ${{ steps.conformance_comment_trigger_argcount_2.outputs.triggered == 'true' }}
        run: |
          echo 2 ${{ steps.conformance_comment_trigger_argcount_2.outputs.arguments }}
          echo ${{ steps.conformance_comment_trigger_argcount_2.outputs.arguments }} > $HOME/ARGS
      - uses: shanegenschaw/pull-request-comment-trigger@v2.1.0
        id: conformance_comment_trigger_argcount_3
        if: ${{ github.event.issue.pull_request }}
        with:
          trigger: '/test-conformance ** ** **'
          reaction: eyes
          allow_arguments: true
        env:
          GITHUB_TOKEN: '${{ secrets.PAT_CI_GHAX }}'
      - id: conformance_comment_trigger_argcount_3_output
        if: ${{ steps.conformance_comment_trigger_argcount_3.outputs.triggered == 'true' }}
        run: |
          echo 3 ${{ steps.conformance_comment_trigger_argcount_3.outputs.arguments }}
          echo ${{ steps.conformance_comment_trigger_argcount_3.outputs.arguments }} > $HOME/ARGS
      - uses: shanegenschaw/pull-request-comment-trigger@v2.1.0
        id: conformance_comment_trigger_argcount_0
        if: ${{ github.event.issue.pull_request && steps.conformance_comment_trigger_argcount_1.outputs.triggered != 'true' && steps.conformance_comment_trigger_argcount_2.outputs.triggered != 'true' && steps.conformance_comment_trigger_argcount_3.outputs.triggered != 'true' }}
        with:
          trigger: '/test-conformance'
          reaction: eyes
          allow_arguments: false
        env:
          GITHUB_TOKEN: '${{ secrets.PAT_CI_GHAX }}'
      - id: conformance_comment_trigger_argcount_0_output
        if: ${{ steps.conformance_comment_trigger_argcount_0.outputs.triggered == 'true' }}
        run: |
          echo 0 'calico,kuberouter,cilium' ${{ steps.conformance_comment_trigger_argcount_1.outputs.triggered }} ${{ steps.conformance_comment_trigger_argcount_2.outputs.triggered }} ${{ steps.conformance_comment_trigger_argcount_3.outputs.triggered }}
          echo 'calico,kuberouter,cilium' > $HOME/ARGS
      - id: set_conformance_matrix
        if: ${{ steps.conformance_comment_trigger_argcount_0.outputs.triggered == 'true' || steps.conformance_comment_trigger_argcount_1.outputs.triggered == 'true' || steps.conformance_comment_trigger_argcount_2.outputs.triggered == 'true' || steps.conformance_comment_trigger_argcount_3.outputs.triggered == 'true' }}
        run: |
          echo "conf_args=$(cat $HOME/ARGS)" >> $GITHUB_OUTPUT

  integration-by-comment:
    runs-on: ubuntu-latest
    needs: [trigger-checks]
    outputs:
      output_1: ${{ needs.trigger-checks.outputs.output_1 }}
    if: ${{ needs.trigger-checks.outputs.conformance-comment == 'true' }}
    steps:
      - name: xxx
        id: yyy
        env:
          OUTPUT5: ${{ needs.trigger-checks.outputs.conformance_matrix_args }}
        run: echo "==>$OUTPUT1 ==>$OUTPUT2 ==>$OUTPUT3 ==>$OUTPUT4 ==>$OUTPUT5 ==>$OUTPUT6"

  test:
    needs: [trigger-checks]
    runs-on: ubuntu-latest
    strategy:
      matrix:
          version: ${{ fromJson(needs.trigger-checks.outputs.v5) }}
    steps:
      - name: ddd
        id: ddd
        env:
          DDDOUTPUT0: ${{ matrix.version }}
        run: echo "$DDDOUTPUT0 ==>"
